# interpreter for shell commands
set shell zsh

# set '-eu' options for shell commands
set shellopts '-eu'

# set previewer
# set previewer ~/.config/lf/previewer
# set previewer ctpv
# set cleaner ctpvclear
# &ctpv -s $id
# &ctpvquit $id

# set internal field separator (IFS) to "\n" for shell commands
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# show relative numbers
# set relativenumber

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# use enter for shell commands
map <enter> shell

# show the result of execution of previous commands
map ` !true

# execute current file (must be executable)
map x $$f
map X !$f

map u extract
# dedicated keys for file opener actions
# map o &mimeopen $f
map o &mimeopen -n 'application/pdf' zathura -- "$f"
map O $mimeopen --ask $f
# mime "^application/pdf$" = zathura %s

cmd open ${{
  case $(file --mime-type -Lb $f) in
    text/*) nvim $f ;;
    application/pdf*) setsid -f zathura $fx >/dev/null 2>&1 ;;
    application/xopp*) setsid -f "flatpak run com.github.xournalpp.xournalpp" $fx >/dev/null 2>&1 ;;
    image/*) setsid -f sxiv $fx >/dev/null 2>&1 ;;
    video/*) mpv $f;;
    *) for f in $fx; do $OPENER $f > /dev/null 2> /dev/null & done;;
  esac
}}

# cmd open ${{
#   case $(file --mime-type -Lb $f) in
#     text/*) nvim $f ;;
#     *) for f in $fx; do xdg-open $f > /dev/null 2> /dev/null & done;;
#   esac
# }}

# cmd open ${{
#     case $(file --mime-type "$f" -bL) in
#         text/*|application/json) $EDITOR "$f";;
#         *) xdg-open "$f" ;;
#     esac
# }}
# set opener "$OPENER"
# application/pdf)
    # zathura "$file" > /dev/null 2>&1 &
    # ;;


# mkdir command. See wiki if you want it to select created dir
map a :push %mkdir<space>

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
# cmd trash %set -f; mv $fx ~/.trash

# trash files using trash-cli
cmd trash %set -f; trash $fx
map t trash $fx

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
  set -f
  case $f in
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
    *.tar.gz|*.tgz) tar xzvf $f;;
    *.tar.xz|*.txz) tar xJvf $f;;
    *.zip) unzip $f;;
    *.rar) unrar x $f;;
    *.7z) 7z x $f;;
  esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
  set -f
  mkdir $1
  cp -r $fx $1
  tar czf $1.tar.gz $1
  rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
  set -f
  mkdir $1
  cp -r $fx $1
  zip -r $1.zip $1
  rm -rf $1
}}

cmd z %{{
	result="$(zoxide query --exclude $PWD $@ | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}
# map z z 

cmd zi ${{
	result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
	lf -remote "send $id cd \"$result\""
}}
# Basic Functions
map . set hidden!
# map dd trash
# map dr restore_trash
# map p paste
# map x cut
# map y copy
# map <enter> open
# map R reload
# map C clear

# Movement
map gD cd ~/Documents
map gd cd ~/Downloads
map gp cd ~/Pictures
map gc cd ~/.config
map gr cd ~/repos
map go cd ~/.local/share/Cryptomator/mnt/ORT-/
map gv cd ~/Videos
map gs cd ~/.local/bin
map gt cd ~/.local/share/Trash/files
